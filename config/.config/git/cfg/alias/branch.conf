
# All these aliases have to deal with branches

[alias]
    # Create a new branch from origin master and publish it to origin
    bcreate = "!f() { git check-remote -nq 2>/dev/null ; git checkout -b $1 origin/$(git default) && git push -u origin $(git branch-name); } ; f"

    # Clean up all local branches that do not have a remote reference.
    cleanup = "!f() { git check-remote -pq && git branch -vv | awk '/: gone]/{print $1}' | xargs git branch -D ; } ; f"

    # Track and untrack, with default parameters, and with printing the command
    track = "!f(){ branch=$(git rev-parse --abbrev-ref HEAD); cmd=\"git branch $branch -u ${1:-origin}/${2:-$branch}\"; echo $cmd; $cmd; }; f"
    untrack = "!f(){ branch=$(git rev-parse --abbrev-ref HEAD); cmd=\"git branch --unset-upstream ${1:-$branch}\"; echo $cmd; $cmd; }; f"

    # Push the current branch to the remote "origin", and set it to track the upstream branch
    publish = "!git push -u origin $(git branch-name)"

    # Delete the remote version of the current branch
    unpublish = "!git push origin :$(git branch-name)"

    # Delete a branch name, then create the same branch name based on master -
    # useful if you have, for example, a development branch and master branch
    # and they go out of sync, and you want to nuke the development branch.
    #
    # Calls the `publish` and `unpublish` aliases.
    #
    reincarnate = !"f() { [[ -n $@  ]] && git checkout \"$@\" && git unpublish && git checkout $(git default) && git branch -D \"$@\" && git checkout -b \"$@\" && git publish;  }; f"

    # Delete all local branches and will leave the branch on master
    delete-local-branches="!git checkout $(git default) ; git branch --list | grep -v \\* | xargs git branch -D"

# vim: ft=gitconfig:
