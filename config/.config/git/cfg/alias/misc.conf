
# Any useful utility aliases

[alias]
    # Outputs who the user's name, email and signingkey is
    whoami = "!git config user.name ; git config user.email ; git config user.signingkey"

    # Foreach author count how many commits they have done
    author-count = shortlog -sen

    # Thin out older metadata within the repository, reduceses filesystem footprint
    trim = !git reflog expire --expire=now --all && git gc --prune=now

    # Foreach file in the repo how many times has it been modified / the most work done on it
    churn = !git log --all -M -C --name-only --format='format:' "$@" | sort | grep -v '^$' | uniq -c | sort

    # Blame now understands move and copied lines and ignores whitespace
    blame = blame -w -M -C

    # Start a new local repository and perform initial commit
    this = !git init && git add . && git commit -m \"Initial commit.\"

    # Friendly wording is easier to remember.
    branches = branch -a
    tags = tag -n1 --list
    stashes = stash list

    # Use fzf to search though the reflog and return back to the selected
    search-reflog = !"f() {\
        git reflog show ${1:-HEAD} --color=always | fzf --ansi | awk '{$2=substr($2,1,length($2)-1); print $2}'; \
    }; f"

    rl = search-reflog
    rlr = !"f() { REF=$(git search-reflog $@) ; [ -n "$REF" ] && git reset $REF ; }; f"
    rlc = !"f() { REF=$(git search-reflog $@) ; [ -n "$REF" ] && git checkout $REF ; }; f"

    # Expunge a file everywhere; this command is typically for a serious problem,
    # such as accidentally committing a file of sensitive data, such as passwords.
    # After you use command, you will likely need to force push everything.
    # See https://help.github.com/articles/removing-sensitive-data-from-a-repository/
    expunge = !"f() { \
        git filter-branch --force --index-filter \"git rm --cached --ignore-unmatch $1\" \
        --prune-empty --tag-name-filter cat -- --all \
    }; f"

    # Assume
    #
    # Sometimes we want to change a file in a repo, but never check in your edits.
    # We can't use .gitignore because the file is tracked. We use update-index.
    #
    # If you interact with big corporate projects, such as projects in Subversion,
    # then you might run into the need to ignore certain files which are under
    # Subversion control, yet you need to modify them but not commit.
    # The assume-unchanged flag comes to the rescue.
    #
    # Suppose we want to edit passwords.txt and for god's sake never check it in:
    #
    #     $ git status
    #     modified passwords.txt
    #     modified foo.txt
    #
    #     $ git assume passwords.txt
    #     $ git status
    #     modified foo.txt
    #
    #     $ git assumed
    #     passwords.txt
    #
    #     $ git unassume passwords.txt
    #     $ git status
    #     modified passwords.txt
    #     modified foo.txt
    #
    assume   = update-index --assume-unchanged
    unassume = update-index --no-assume-unchanged
    assume-all = "!git st -s | awk {'print $2'} | xargs git assume"
    unassume-all = "!git assumed | xargs git update-index --no-assume-unchanged"
    assumed  = !"git ls-files -v | grep ^h | cut -c 3-"

# vim: ft=gitconfig:
