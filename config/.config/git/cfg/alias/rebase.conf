
# Everything that has to deal with rebase/merging

[alias]
    # Rebase branch on another branch. Git wip is called to make sure the working directory is in
    # a valid state for a rebase; (unclean working directory). A branch can be provided to the
    # alias. If no branch is provided the remote and branch will be determined automaticlly.
    # The remote default to `origin`. The remote will be set to `upstream` if a remote is found with this name.
    # The branch will be determined by the repositories default branch. This is normally `main` or `master`.
    rb = !"f() { \
        git wip; git rebase ${1:-$(git base-remote)/$(git default)} ; git unwip ; \
    }; f"

    rbi = !"f() { \
        git wip; git rebase -i ${1:-$(git base-remote)/$(git default)} ; git unwip ; \
    }; f"

    # Rebase operations
    rba = rebase --abort
    rbc = rebase --continue
    rbs = rebase --skip

    # Like selfbase but will interactive rebase the number that you pass in. Ex 'git nbase 3' will
    # interactive rebase the last 3 commit in the branch.
    nbase = "!f() { git rebase -i HEAD~${1:-2} ; } ; f"

    # Interactive rebase the current branch from the start of the branch
    selfbase = "! git nbase $(git branch-count)"

    # Resolve all conflicted files by using "ours" resolution
    ours = !"f() { \
        (($#>=1)) && ((git checkout --ours $@) && git add $@ ; true) || \
        (git diff --name-only --diff-filter=U | xargs -I % sh -c 'git checkout --ours %; git add %;') \
    }; f"

    # Resolve all conflicted files by using "theirs" resolution
    theirs = !"f() { \
        (($#>=1)) && ((git checkout --theirs $@) && git add $@ ; true) || \
        (git diff --name-only --diff-filter=U | xargs -I % sh -c 'git checkout --theirs %; git add %;') \
    }; f"


# vim: ft=gitconfig:
