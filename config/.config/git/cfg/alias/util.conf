
# These aliases are not very useful on their own. They are ment to be used by other
# aliases to help make them easier. This file needs to be sourc before all other
# alias files in order for them to be used.

[alias]
    # Try to fetch from remotes and if you cant connect then eat the error and continue
    check-remote = "!git fetch --all -nq 2>/dev/null"

    # Get the current branch name (not so useful in itself, but used in other aliases)
    branch-name = rev-parse --abbrev-ref HEAD

    # Gets the current number of commits on the current branch since the branch was made
    # This assumes that the branch came from master. Not then change to the parent branch
    branch-count = "!git rev-list --count HEAD ^origin/$(git default)"

    # An attempt at getting the number of commits from the parent branch
    # branch-parent = "!git rev-list -1 `git rev-list branch-name...master | tail -1`^"

    # Get the commit count from the current head revision
    commit-count = rev-list --count HEAD

    # Returns the abbreviation of the sha1 hash for the current commit
    abbreviation = "!git rev-parse --short ${1-`echo HEAD`}"

    # Returns the url of the remote
    remote-url = ls-remote --get-url origin

    # Returns the default branch for a remote. Normally this is `master` or `main`
    default = "!f() { git symbolic-ref refs/remotes/${1:-origin}/HEAD | sed \"s@^refs/remotes/${1:-origin}/@@\" ; } ; f"

    # Returns the base remote for a repository. For a normal repository this will return origin.
    # When a repository is a fork I use the remote name `upstream` as the base remote name.
    # If the repository is a fork it will return the remote `upstream` as that is the base of
    # the project, as this one is a fork.
    base-remote = "!f() { \
        [[ -n $(git remote | grep -E '^upstream$') ]] && echo upstream || echo origin ; \
    } ; f"


# vim: ft=gitconfig:
