
# All these aliases have something to do with commits and changes

[alias]
    # Add only non whitespace changes ([A]dd [N]o [W]hitespace)
    anw = !git diff -U0 -w --no-color -- \"$@\" | git apply --cached --ignore-whitespace --unidiff-zero "#"

    # I want to sneak a commit into the last commit I did.
    oops = commit --amend --no-edit

    # This resets head to the previous change but keeps the changes in the working directory
    undo = reset HEAD~1 --mixed

    # Unstage all stages changes
    unstage = "!f() { git reset --soft $((($#>=1))&&echo --) ${@:-HEAD --} ; } ; f"

    # Want to fixup a commit that is not the last commit. https://blog.filippo.io/git-fixup-amending-an-older-commit/
    fixup = !"f() { \
        TARGET=$(git rev-parse "$1"); \
        git commit --fixup=$TARGET ${@:2} && EDITOR=true git rebase -i --autostash --autosquash $TARGET^; \
    }; f"

    # Work In Progress: from https://gist.github.com/492227 and VonC on stackoverflow.
    # This enables a quick way to add all new and modified files to the index,
    # while cleaning the index from the files removed from the working tree;
    # this cleaning will facilitate a rebase, because there won't be any conflict
    # due to an "unclean" working directory (not in sync with the index).
    # The unwip will restore the deleted files to the working tree.
    wip = !"git add --all; git ls-files --deleted -z | xargs -0 git rm; git commit --message=wip --no-verify"
    unwip = !"git log -n 1 | grep -q -c wip && git reset HEAD~1"

    # Stash snapshot - Take a snapshot of your current working tree without removing changes.
    # This is handy for refactoring where you can't quite fit what you've done into a commit but
    # daren't stray too far from now without a backup.
    #
    # Running this:
    #
    #    $ git snapshot [message]
    #
    # Creates this stash:
    #
    #    stash@{0}: On feature/handy-git-tricks: snapshot: Mon Apr 8 12:39:06 BST 2013
    #
    # And seemingly no changes to your working tree.
    #
    snapshot = !"f() { \
        (($# = 0)) && MESSAGE=\"snapshot: $(date)\" || MESSAGE=\"snapshot: $@ $(date)\"; \
        git stash push -um \"$MESSAGE\" && git stash apply stash@{0} ; \
    }; f"

    # Search commits on the current branch and return the commit's sha
    search-commit = !"f() { \
        git log --date=format:'%Y-%m-%d %H:%M' --pretty=format:'%C(yellow)%h%Creset %C(blue)%ad%Creset %s' --color=always | \
        fzf --ansi | awk '{print $1}' ; \
    }; f"

# vim: ft=gitconfig:
