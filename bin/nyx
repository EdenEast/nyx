#!/usr/bin/env bash

set -e

# Stop script on NZEC
set -e
# By default cmd1 | cmd2 returns exit code of cmd2 regardless of cmd1 success
# This is causing it to fail
set -o pipefail

# Setup some colors to use. These need to work in fairly limited shells, like the Ubuntu Docker container where there are only 8 colors.
# See if stdout is a terminal
if [ -t 1 ] && command -v tput >/dev/null; then
  ncolors=$(tput colors || echo 0)
  # color chart https://stackoverflow.com/a/5947802
  if [ -n "$ncolors" ] && [ $ncolors -ge 8 ]; then
    RED="$(tput setaf 1 || echo)"
    GREEN="$(tput setaf 2 || echo)"
    YELLOW="$(tput setaf 3 || echo)"
    BLUE="$(tput setaf 4 || echo)"
    CYAN="$(tput setaf 6 || echo)"
  fi
  RESET='\033[0m'
fi

# Setting platform specific information
[[ $(uname -s) == "Darwin" ]] && IS_MAC=true || IS_MAC=false
$IS_MAC && grep -q "nixos" /etc/os-release 2>/dev/null && IS_NIXOS=true || IS_NIXOS=false
NYX_ROOT="$(dirname "$(dirname "$(readlink -f "$0")")")"

# shellcheck disable=SC2034
HOME_MANAGER_BACKUP_EXT="nbak"

# shellcheck shell=bash
INTERNAL_COMMANDS="^(build|check|fmt|gc|help|link|repl|rollback|switch|test|update|unlink)$"

declare -A INTERNAL_ALIASES
INTERNAL_ALIASES['b']="build"
INTERNAL_ALIASES['c']="check"
INTERNAL_ALIASES['f']="fmt"
INTERNAL_ALIASES['g']="gc"
INTERNAL_ALIASES['l']="link"
INTERNAL_ALIASES['s']="switch"
INTERNAL_ALIASES['t']="test"
INTERNAL_ALIASES['ul']="unlink"
INTERNAL_ALIASES['up']="update"

NIXARGS=(--experimental-features "nix-command flakes")
NIXBUILDARGS=(
  --accept-flake-config
)

declare -A TARGETS
declare -A SOURCES
TARGETS['awesome']="$HOME/.config/awesome"
SOURCES['awesome']="$NYX_ROOT/config/.config/awesome"
TARGETS['alacritty']="$HOME/.config/alacritty"
SOURCES['alacritty']="$NYX_ROOT/config/.config/alacritty"
TARGETS['git']="$HOME/.config/git"
SOURCES['git']="$NYX_ROOT/config/.config/git"
TARGETS['nu']="$HOME/.config/nushell"
SOURCES['nu']="$NYX_ROOT/config/.config/nushell"
TARGETS['nvim']="$HOME/.config/nvim"
SOURCES['nvim']="$NYX_ROOT/config/.config/nvim"
TARGETS['shell']="$HOME/.config/shell"
SOURCES['shell']="$NYX_ROOT/config/.config/shell"
TARGETS['tmux']="$HOME/.config/tmux"
SOURCES['tmux']="$NYX_ROOT/config/.config/tmux"
TARGETS['wezterm']="$HOME/.config/wezterm"
SOURCES['wezterm']="$NYX_ROOT/config/.config/wezterm"
TARGETS['zellij']="$HOME/.config/zellij"
SOURCES['zellij']="$NYX_ROOT/config/.config/zellij"
TARGETS['zsh']="$HOME/.config/zsh"
SOURCES['zsh']="$NYX_ROOT/config/.config/zsh"

function main() {
  # Parse command line options
  if [ -z "$*" ]; then
    cmd_help # There is no arguments passed print help
  elif [[ $1 == '--help' ]]; then
    HELP=true
  elif [[ $1 =~ $INTERNAL_COMMANDS ]]; then
    NYX_COMMAND="${1//-/_}"
    shift
  elif [[ -n ${INTERNAL_ALIASES[$1]} ]]; then
    NYX_COMMAND="${INTERNAL_ALIASES[$1]}"
    shift
  else
    failure "Unknown command: \`$1\`"
    # shellcheck disable=SC2317
    cmd_help
  fi

  NYX_ARGS=()
  while [[ $# -gt 0 ]]; do
    key="$1"
    case $key in
      -v | --verbose) # used by all commands
        DEBUG="YES"
        ;;
      -h | --help)
        CMD_HELP=true
        ;;
      *)
        NYX_ARGS+=("$1")
        ;;
    esac
    shift
  done

  [ -n "$HELP" ] && cmd_help

  "cmd_$NYX_COMMAND" "${NYX_ARGS[@]}"
  exit 0
}

# --- Commands ----------------------------------------------------------------

# shellcheck disable=SC2317
function cmd_build() {
  set +e
  local help_msg
  IFS='' read -r -d '' help_msg <<EOF
USAGE:
  nyx build [target]

Build an output target. If no output target is specified nyx will build
either the nixos system configuration or the toplevel host config.

OPTIONS:
  -h, --help      Show help message
EOF
  set -e

  [ -n "$CMD_HELP" ] && {
    printf "%s\n" "$help_msg"
    exit 1
  }

  local -a args
  while [[ $# -gt 0 ]]; do
    case "$1" in
      *)
        args+=("$1")
        ;;
    esac
    shift
  done

  (
    cd "$NYX_ROOT"

    # If a build target has been specified then tell nix build this target
    if [[ ${#args[@]} -gt 0 ]]; then
      debug "target argument was passed to build. Building ${args[0]}"
      nix build ".#top.${args[0]}" "${NIXARGS[@]}" "${NIXBUILDARGS[@]}"
    else
      # There was no target passed to build so infer what do build
      if $IS_MAC; then
        debug "Darwin detected building DarwinConfiguration for the host machine: $(hostname)"
        darwin-rebuild build --flake .
      elif $IS_NIXOS; then
        debug "Nixos detected building NixosConfiguration for the host machine: $(hostname)"
        sudo nixos-rebuild build --flake .
      else
        debug "Nixos not detected, building target based on \$USER: $USER"
        # When not on nixos it is harder to infer what we are supposed to build for the platform if we cant
        # infer then nix build will just run and build the default package.
        # TODO: This is wrong and should save what top target should be built for the machine.
        nix build ".#top.$USER" "${NIXARGS[@]}" "${NIXBUILDARGS[@]}"

        # # Could not infer and building the default package
        # debug "Could not infer target to build, building default package for the flake"
        # nix build "${NIXARGS[@]}" "${NIXBUILDARGS[@]}"
      fi
    fi
  )
}

# shellcheck disable=SC2317
function cmd_check() {
  set +e
  local help_msg
  IFS='' read -r -d '' help_msg <<EOF
USAGE:
  nyx check

Execute flake check output.

OPTIONS:
  -h, --help      Show help message
EOF
  set -e

  [ -n "$CMD_HELP" ] && {
    printf "%s\n" "$help_msg"
    exit 1
  }

  local -a args
  while [[ $# -gt 0 ]]; do
    case "$1" in
      *)
        args+=("$1")
        ;;
    esac
    shift
  done

  (
    cd "$NYX_ROOT"

    nix flake check
  )
}

# shellcheck disable=SC2317
function cmd_fmt() {
  set +e
  local help_msg
  IFS='' read -r -d '' help_msg <<EOF
USAGE:
  nyx fmt [OPTIONS] [target...]

Execute formatters for file types.

OPTIONS:
  -h, --help      Show help message
EOF
  set -e

  [ -n "$CMD_HELP" ] && {
    printf "%s\n" "$help_msg"
    exit 1
  }

  local -a args
  while [[ $# -gt 0 ]]; do
    case "$1" in
      *)
        args+=("$1")
        ;;
    esac
    shift
  done

  (
    cd "$NYX_ROOT"

    # Formatting *.nix files
    nix-shell -p fd -p nixpkgs-fmt --run "fd . --type f --extension nix --exec nixpkgs-fmt {}"

    (
      cd "config/.config/nvim"
      nix-shell -p stylua --run "stylua -g *.lua -- ."
    )
  )
}

# shellcheck disable=SC2317
function cmd_gc() {
  set +e
  local help_msg
  IFS='' read -r -d '' help_msg <<EOF
USAGE:
  nyx gc [OPTIONS] [target...]

Garbage collection and nix store optimization

OPTIONS:
  -h, --help      Show help message
  -a, --all       GC both user and system profiles
  -s, --system    Only gc system profile
EOF
  set -e

  [ -n "$CMD_HELP" ] && {
    printf "%s\n" "$help_msg"
    exit 1
  }

  local -a args
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -a | --all) do_all=true ;;
      -s | --system) do_system=true ;;
      *)
        args+=("$1")
        ;;
    esac
    shift
  done

  if [ -n "$do_all" ] || [ -n "$do_system" ]; then
    info "Cleaning up system profile"
    sudo nix-collect-garbage -d
    sudo nix-store --optimize

    # nix-collect-garbage is a Nix tool, not a NixOS tool. It won't delete old
    # boot entries until you do a nixos-rebuild (which means we'll always have
    # 2 boot entries at any time). Instead, we properly delete them by
    # reloading the current environment.
    sudo nix-env --delete-generations old --profile /nix/var/nix/profiles/system
    sudo /nix/var/nix/profiles/system/bin/switch-to-configuration switch
  fi

  if [ -n "$do_all" ] || [ -z "$do_system" ]; then
    info "Cleaning up system profile"
    nix-collect-garbage -d
  fi
}

# shellcheck disable=SC2317
function cmd_link() {
  set +e
  local help_msg
  IFS='' read -r -d '' help_msg <<EOF
USAGE:
  nyx link [OPTIONS] [target...]

Create a symlink to config file. If no application is given all will be provided.

TARGETS:
  alacritty
  awesome
  git
  nu
  nvim
  shell
  tmux
  wezterm
  zellij
  zsh

OPTIONS:
  -h, --help      Show help message
  -l, --list      Show status of current links
                    - Green:  Linked to local 'config/'
                    - Cyan:   Linked to the nix store
                    - Yellow: Linked to somewhere other then /nix/store
                    - Red:    Target points to a non linked directory
                    - Blue:   Target does not exist on system
EOF

  [ -n "$CMD_HELP" ] && {
    printf "%s\n" "$help_msg"
    exit 1
  }

  local -a args
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -l | --list)
        do_list=true
        ;;
      *)
        args+=("$1")
        ;;
    esac
    shift
  done

  [ -n "$do_list" ] && {
    for key in "${!SOURCES[@]}"; do
      src="${SOURCES[$key]}"
      tar="${TARGETS[$key]}"

      if [ -L "$tar" ]; then
        output=$(readlink "$tar")
        if [[ $output == "$src" ]]; then
          color="$GREEN"
        else
          [[ $output =~ ^/nix/store/.* ]] && color="$CYAN" || color="$YELLOW"
        fi
      else
        if [ -d "$tar" ] || [ -f "$tar" ]; then
          output="$tar"
          color="$RED"
        else
          color="$BLUE"
          output="---"
        fi
      fi
      printf "${color}%*s${RESET}: %s\n" 10 "$key" " $output"
    done

    exit 0
  }

  function create_link() {
    if [[ -L $1 ]]; then
      if [[ "$(readlink "$1")" == "$2" ]]; then
        debug "link: $1 already points to $2. Skipping"
        return
      else
        debug "Found link: \`$1\` removing"
        rm "$1"
      fi
    fi

    if [[ -d $1 ]]; then
      if [[ $1 =~ (git|nushell)$ ]]; then
        rm -r "$1"
      else
        warn "path: \`$1\` is a directory. Skipping"
        return
      fi
    fi

    ln -s "$2" "$1"
    if [[ "$(readlink "$1")" == "$2" ]]; then
      debug "created link $1 to $2"
    else
      failure "created link $1 does not point to $2. Points to $(readlink "$1")"
    fi
  }

  (
    cd "$NYX_ROOT"

    if [[ ${#args[@]} -gt 0 ]]; then
      for index in "${!args[@]}"; do
        key="${args[$index]}"
        target="${TARGETS[$key]}"
        source="${SOURCES[$key]}"
        if [[ -z $target ]] || [[ -z $source ]]; then
          failure "unknown target $key"
        fi

        create_link "$target" "$source"
      done
    else
      for key in "${!TARGETS[@]}"; do
        create_link "${TARGETS[$key]}" "${SOURCES[$key]}"
      done
    fi
  )

  set -e
}

# shellcheck disable=SC2317
function cmd_repl() {
  set +e
  local help_msg
  IFS='' read -r -d '' help_msg <<EOF
USAGE:
  nyx repl [OPTIONS]

Open nix repl with configuration flake loaded

OPTIONS:
  -h, --help      Show help message
EOF
  set -e

  [ -n "$CMD_HELP" ] && {
    printf "%s\n" "$help_msg"
    exit 1
  }

  local -a args
  while [[ $# -gt 0 ]]; do
    case "$1" in
      *)
        args+=("$1")
        ;;
    esac
    shift
  done

  (
    tmpfile="/tmp/nyx-repl.nix"
    echo "(builtins.getFlake \"$NYX_ROOT\")" >"$tmpfile"
    nix repl --file "$tmpfile" "${args[@]}"
    rm "$tmpfile"
  )
}

# shellcheck disable=SC2317
function cmd_rollback() {
  set +e
  local help_msg
  IFS='' read -r -d '' help_msg <<EOF
USAGE:
  nyx rollback [OPTIONS]

Rollback the current generation.

OPTIONS:
  -h, --help      Show help message
EOF
  set -e

  [ -n "$CMD_HELP" ] && {
    printf "%s\n" "$help_msg"
    exit 1
  }

  local -a args
  while [[ $# -gt 0 ]]; do
    case "$1" in
      *)
        args+=("$1")
        ;;
    esac
    shift
  done

  (
    cd "$NYX_ROOT"

    if $IS_MAC; then
      sudo darwin-rebuild --rollback
    elif $IS_NIXOS; then
      sudo nixos-rebuild --rollback
    else
      local current prev prev_store_path
      current="$(nix-env --list-generations --profile "/nix/var/nix/profiles/per-user/$USER/home-manager" | grep '(current)' | awk '{print $1}')"
      prev="$((current - 1))"
      prev_store_path=$(home-manager generations | grep "id $prev ->" | awk '{print $NF}')
      "$prev_store_path/activate"
    fi
  )
}

# shellcheck disable=SC2317
function cmd_switch() {
  set +e
  local help_msg
  IFS='' read -r -d '' help_msg <<EOF
USAGE:
  nyx switch [OPTIONS] [target...]

Switch the current installed configuration state.

OPTIONS:
  -h, --help      Show help message
  -l, --link      Link after switch
EOF
  set -e

  [ -n "$CMD_HELP" ] && {
    printf "%s\n" "$help_msg"
    exit 1
  }

  local -a args
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -l | --link)
        do_link=true
        ;;
      *)
        args+=("$1")
        ;;
    esac
    shift
  done

  (
    cd "$NYX_ROOT"

    local -a linked
    for key in "${!TARGETS[@]}"; do
      target="${TARGETS[$key]}"
      src="${SOURCES[$key]}"
      if [ -L "$target" ]; then
        output="$(readlink "$target")"
        if [[ $output != /nix/store/* ]]; then
          linked+=("$src:$target")
          echo rm "$target"
          rm "$target"
        fi
      fi
    done

    function restore_links() {
      code=$?
      delimiter=":"
      for link in "${linked[@]}"; do
        parts=(${link//$delimiter/ })
        echo ln -s ${parts[0]} ${parts[1]}
        ln -s ${parts[0]} ${parts[1]}
      done

      if [ "$code" -eq 0 ]; then
        exit "$code"
      fi
    }

    # Switch to new configuration
    if [[ ${#args[@]} -gt 0 ]]; then
      if $IS_MAC; then
        debug "Switching to defined target ${args[0]} on darwin system"
        darwin-rebuild switch --flake ".#${args[0]}" || restore_links
      elif $IS_NIXOS; then
        debug "Switching to defined target ${args[0]} on nixos system"
        sudo nixos-rebuild switch --flake ".#${args[0]}" || restore_links
      else
        debug "Switching to defined target ${args[0]} on non nixos system"
        cmd_build "${NYX_ARGS[@]}" && ./result/activate || restore_links
      fi
    else
      if $IS_MAC; then
        debug "Darwin detected switching DarwinConfiguration for the host machine: $(hostname)"
        darwin-rebuild switch --flake . || restore_links
      elif $IS_NIXOS; then
        debug "Nixos detected switching NixosConfiguration for the host machine: $(hostname)"
        sudo nixos-rebuild switch --flake . || restore_links
      else
        debug "Nixos not detected, switching target based on \$USER: $USER"
        # When not on nixos is is harder to infer what we are supposed to build for the platform if we cant
        # infer then nix build will just run and build the default package.
        # TODO: This is wrong and should save what top target should be built for the machine.
        cmd_build "${NYX_ARGS[@]}" && ./result/activate || restore_links

        # # Could not infer and building the default package
        # debug "Could not infer target to build, building default package for the flake"
        # nix build "${NIXARGS[@]}" "${NIXBUILDARGS[@]}"
      fi
    fi

    [ -n "$do_link" ] && restore_links
  )
}

# shellcheck disable=SC2317
function cmd_test() {
  set +e
  local help_msg
  IFS='' read -r -d '' help_msg <<EOF
USAGE:
  nyx test [OPTIONS] [target...]

Test the current installed configuration state.

OPTIONS:
  -h, --help      Show help message
  -l, --link      Link after switch
EOF
  set -e

  [ -n "$CMD_HELP" ] && {
    printf "%s\n" "$help_msg"
    exit 1
  }

  local -a args
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -l | --link)
        do_link=true
        ;;
      *)
        args+=("$1")
        ;;
    esac
    shift
  done

  (
    cd "$NYX_ROOT"

    # Making sure that the target builds before trying to unlink and switch
    cmd_build "${NYX_ARGS[@]}"

    # Since the build completed with no issues then it is safe to unlink
    # and switch to the new config
    cmd_unlink

    # Switch to new configuration
    if [[ ${#args[@]} -gt 0 ]]; then
      if $IS_MAC; then
        debug "Switching to defined target ${args[0]} on darwin system"
        darwin-rebuild activate --flake ".#${args[0]}"
      elif $IS_NIXOS; then
        debug "Switching to defined target ${args[0]} on nixos system"
        sudo nixos-rebuild test --flake ".#${args[0]}"
      else
        debug "Switching to defined target ${args[0]} on non nixos system"
        ./result/activate
      fi
    else
      if $IS_MAC; then
        debug "Darwin detected switching DarwinConfiguration for the host machine: $(hostname)"
        darwin-rebuild activate --flake .
      elif $IS_NIXOS; then
        debug "Nixos detected switching NixosConfiguration for the host machine: $(hostname)"
        sudo nixos-rebuild test --flake . # TODO: How do force to use extra binary caches?
      else
        debug "Nixos not detected, switching target based on \$USER: $USER"
        # When not on nixos is is harder to infer what we are supposed to build for the platform if we cant
        # infer then nix build will just run and build the default package.
        # TODO: This is wrong and should save what top target should be built for the machine.
        ./result/activate

        # # Could not infer and building the default package
        # debug "Could not infer target to build, building default package for the flake"
        # nix build "${NIXARGS[@]}" "${NIXBUILDARGS[@]}"
      fi
    fi

    [ -n "$do_link" ] && cmd_link
  )
}

# shellcheck disable=SC2317
function cmd_update() {
  set +e
  local help_msg
  IFS='' read -r -d '' help_msg <<EOF
USAGE:
  nyx update [OPTIONS] [inputs...]

Update flake.lock file

OPTIONS:
  -h, --help      Show help message
EOF
  set -e

  [ -n "$CMD_HELP" ] && {
    printf "%s\n" "$help_msg"
    exit 1
  }

  local -a args
  while [[ $# -gt 0 ]]; do
    case "$1" in
      *)
        args+=("$1")
        ;;
    esac
    shift
  done

  (
    cd "$NYX_ROOT"

    # TODO: update flake-url / inputs
    nix flake update
  )
}

# shellcheck disable=SC2317
function cmd_unlink() {
  set +e
  local help_msg
  IFS='' read -r -d '' help_msg <<EOF
USAGE:
  nyx unlink [OPTIONS] [targets...]

Remove manual symlinks to config/ folder

TARGETS:
  nvim
  awesome

OPTIONS:
  -h, --help      Show help message
EOF

  [ -n "$CMD_HELP" ] && {
    printf "%s\n" "$help_msg"
    exit 1
  }

  local -a args
  while [[ $# -gt 0 ]]; do
    case "$1" in
      *)
        args+=("$1")
        ;;
    esac
    shift
  done

  function remove_link() {
    if [[ -L $1 ]]; then
      if [[ $(readlink "$1") == "$2" ]]; then
        debug "link: $1 points to nyx config folder $2. Removing"
        rm "$1"
      else
        debug "link $1 does not point to nyx config folder: $(readlink "$1")"
      fi
    fi
  }

  (
    cd "$NYX_ROOT"

    if [[ ${#args[@]} -gt 0 ]]; then
      for index in "${!args[@]}"; do
        key="${args[$index]}"
        target="${TARGETS[$key]}"
        source="${SOURCES[$key]}"
        if [[ -z $target ]] || [[ -z $source ]]; then
          failure "unknown target $key"
        fi

        remove_link "$target" "$source"
      done
    else
      for key in "${!TARGETS[@]}"; do
        remove_link "${TARGETS[$key]}" "${SOURCES[$key]}"
      done
    fi
  )

  set -e
}

# shellcheck disable=SC2317
function cmd_help() {
  if [[ $1 =~ $INTERNAL_COMMANDS ]]; then
    $1 '--help'
  fi

  set +e
  local msg
  IFS='' read -r -d '' msg <<EOF
Utility script to work with my nix configuration more effectively

USAGE:
  nyx <COMMAND> [OPTIONS...]

COMMANDS:
  build    - Build target
  check    - Execute flake check
  fmt      - Execute formatters
  gc       - Garbage collection and nix store optimization
  link     - Symlink config locations in config/ to ~/.config
  repl     - Open nix repl with configuration flake loaded
  rollback - Rollback the current generation.
  switch   - Switch to configuration
  update   - Update flake inputs
  unlink   - Remove custom link from the \`link\` command

OPTIONS:
  -v, --verbose  - Output verbose information
  -h, --help     - Output help information
EOF
  set -e

  printf "%s\n" "$msg"
  exit 1
}

# --- Utility functions -------------------------------------------------------

# shellcheck disable=SC2317
function debug() {
  if [ -n "$DEBUG" ]; then echo_e "${BLUE}[DEBUG]: $*${RESET}"; fi
}

# shellcheck disable=SC2317
function info() {
  echo_e "$*"
}

# shellcheck disable=SC2317
function warn() {
  echo_e "${YELLOW}[WARN]: $*${RESET}"
}

# shellcheck disable=SC2317
function error() {
  echo_e "${RED}[ERROR]: $*${RESET}" 1>&2
}

# shellcheck disable=SC2317
function failure() {
  error "$1"
  exit "${2:-1}"
}

# --- Echo replacements -------------------------------------------------------

# shellcheck disable=SC2317
function echo() {
  IFS=' '
  printf '%s\n' "$*"
}

# shellcheck disable=SC2317
function echo_n() {
  IFS=' '
  printf '%s' "$*"
}

# shellcheck disable=SC2317
function echo_e() {
  IFS=' '
  printf '%b\n' "$*"
}

# --- Execute main process ----------------------------------------------------
main "$@"

# vim: et sw=2 ts=2 sts=2
