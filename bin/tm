#!/usr/bin/env bash

set -e

# shellcheck shell=bash
INTERNAL_COMMANDS="^(add|attach|help|jump|kill|list|remove|wcmd)$"

TM_ALIAS_A="attach"
TM_ALIAS_J="jump"
TM_ALIAS_K="kill"
TM_ALIAS_L="list"
TM_ALIAS_W="wcmd"

CACHE_HOME="$HOME/.cache/tmux"
WORKSPACE_CACHE_FILE="$CACHE_HOME/workspace"
SINGLE_CACHE_FILE="$CACHE_HOME/single"
JUMPLIST_CACHE_FILE="$CACHE_HOME/jumplist"

function main() {
  TM_COMMAND="attach"
  TM_ARGS=()

  # Parse command line options
  if [ -n "$*" ]; then
    if [[ $1 == '--help' ]]; then
      TM_HELP=true
    elif [[ $1 =~ $INTERNAL_COMMANDS ]]; then
      TM_COMMAND="${1//-/_}"
      shift
    else
      local upper="TM_ALIAS_$(echo $1 | tr '[:lower:]' '[:upper:]')"
      local internal_command="$(printf %s "${!upper}")"
      if [ -n "$internal_command" ]; then
        TM_COMMAND="$internal_command"
        shift
      fi
    fi
  fi

  while [[ $# -gt 0 ]]; do
    key="$1"
    case $key in
      --)
        shift
        break
        ;;
      -h | --help)
        CMD_HELP=true
        ;;
      *)
        TM_ARGS+=("$1")
        ;;
    esac
    shift
  done

  [ -n "$TM_HELP" ] && cmd_help

  validate-cache-folder

  "cmd_$TM_COMMAND" "${TM_ARGS[@]}" "$@"
  exit 0
}

# --- Commands ----------------------------------------------------------------

function cmd_add() {
  set +e
  local help_msg
  ifs='' read -r -d '' help_msg <<eof
USAGE:
  tm add [OPTIONS] [path...]

Register a path to use when listing paths to attach.

This path can either be a 'workspace' path or just a 'single' path. A workspace
path will search for all git directories that are contained within. By default
a path is a 'single' path.

OPTIONS:
  -w, --workspace    Use path as a workspace path
  -h, --help         Prints help information

ARGS:
  <path...>          Optional path to be added. Uses 'cwd' if not present
eof
  set -e

  local -a args
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -w | --workspace)
        use_workspace=true
        ;;
      *)
        args+=("$1")
        ;;
    esac
    shift
  done

  [ -n "$CMD_HELP" ] && {
    printf "%s\n" "$help_msg"
    exit 1
  }

  local cachepath
  if [[ -z $use_workspace ]]; then
    cachepath="$SINGLE_CACHE_FILE"
  else
    cachepath="$WORKSPACE_CACHE_FILE"
  fi

  local paths
  if [[ ${#args[@]} -eq 0 ]]; then
    paths=("$(pwd)")
  else
    for p in "${args[@]}"; do
      paths=("${paths[@]}" "$(realpath "$p")")
    done
  fi

  for p in "${paths[@]}"; do
    local sum path
    sum="$(checksum "$p")"
    if [[ -d $p ]]; then
      if ! grep -q "^$sum" "$cachepath"; then
        echo "$sum $p" >>"$cachepath"
      fi
    fi
  done
}

function cmd_attach() {
  set +e
  local help_msg
  ifs='' read -r -d '' help_msg <<eof
USAGE:
  tm attach [OPTIONS] [query]

Create or attach to a tmux session based on the path specified

ALIAS: 'a'

OPTIONS:
  -p, --path <path>  Exact path to create or attach tmux session
  -e, --exist        Attach to existing tmux session
  -h, --help         Prints help information

ARGS:
  <query>           Query to search from
eof
  set -e

  local -a args
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -e | --exist)
        do_existing=true
        ;;
      -p | --path)
        shift
        do_path="$1"
        # do_query="--height 40% --reverse --select-1 --exit-0 --exact --query $1"
        ;;
      *)
        args+=("$1")
        ;;
    esac
    shift
  done

  [ -n "$CMD_HELP" ] && {
    printf "%s\n" "$help_msg"
    exit 1
  }

  if [[ -n $do_existing ]]; then
    local sessions name extra_args
    # shellcheck disable=SC2207
    sessions=($(tmux list-sessions -F "#{session_name}"))
    if [[ ${#sessions[@]} -eq 1 ]]; then
      name="${sessions[0]}"
    else
      if [[ ${#args[@]} -gt 0 ]]; then
        extra_args=("--select-1" "--exit-0" "--exact" "--query" "${args[@]}")
      fi
      name="$(write-list "${sessions[@]}" | fzf --height 40% --reverse "${extra_args[@]}")"
    fi
    if [[ -z $TMUX ]]; then
      tmux attach-session -t "$name"
    else
      tmux switch-client -t "$name"
    fi
    exit 0
  fi

  local selected
  if [[ -n $do_path ]]; then
    selected="$(realpath "$do_path")"
    if [[ ! -d $selected ]]; then
      echo "Unknown path: $selected"
      exit 1
    fi
  else
    local workspace_list
    local selection_list

    local extra_args
    if [[ ${#args[@]} -gt 0 ]]; then
      # Shortcut to start a tmux session in cwd
      if [[ ${args[0]} == '.' ]]; then
        selected="$(pwd)"
      else
        extra_args=("--height" "40%" "--reverse" "--select-1" "--exit-0" "--exact" "--query" "${args[@]}")
      fi
    fi

    if [[ -z $selected ]]; then
      # shellcheck disable=SC2207
      selection_list=($(write-paths "$SINGLE_CACHE_FILE"))

      # shellcheck disable=SC2207
      workspace_list=($(write-paths "$WORKSPACE_CACHE_FILE"))

      for d in "${workspace_list[@]}"; do
        local tmp=("$(fd -t d --hidden --prune -d 4 '\.(bare|git)$' "$d" -x echo "{//}")")
        selection_list=("${selection_list[@]}" "${tmp[@]}")
      done

      # shellcheck disable=SC2086
      selected=$(write-list "${selection_list[@]}" | fzf "${extra_args[@]}")
      if [[ -z $selected ]]; then
        exit 1
      fi
    fi
  fi

  local selected_name tmux_running
  selected_name=$(basename "$selected" | tr . _)
  tmux_running=$(pgrep tmux || true)

  if [[ -z $TMUX ]] && [[ -z $tmux_running ]]; then
    tmux new-session -s "$selected_name" -c "$selected"
    exit 0
  fi

  if ! tmux has-session -t="$selected_name" 2>/dev/null; then
    tmux new-session -d -s "$selected_name" -c "$selected"
  fi

  if [[ -z $TMUX ]]; then
    tmux attach-session -t "$selected_name"
  else
    tmux switch-client -t "$selected_name"
  fi
}

function cmd_help() {
  if [[ $1 =~ $INTERNAL_COMMANDS ]]; then
    $1 '--help'
  fi

  set +e
  local msg
  IFS='' read -r -d '' msg <<EOF
USAGE:
  tm [OPTIONS...] <command>

Tmux utility script for session and window management

By default if there is no command passed as the first argument the
command 'attach' will be assumed.

COMMANDS:
  add           Register a path to use when listing paths to attach
  attach        Attach to new or existing tmux session
  jump          Jump to registed path in jumplist
  kill          Kill a running session
  list          List registered paths
  remove        Remove registered path
  wcmd          Execute a command in a specific tmux window

OPTIONS:
  -h, --help    Prints help information
EOF
  set -e

  printf "%s\n" "$msg"
  exit 1
}

function cmd_jump() {
  set +e
  local help_msg
  ifs='' read -r -d '' help_msg <<eof
USAGE:
  tm jump [OPTIONS]

Store a list of paths and jump to that index. This is useful for keybindings
where you set keybindingd to jump to index 1, 2, 3, ... and tm will check
the list of stored paths and use that to jump to that tmux session.

By default if no options are padded then the cwd is added to the jump list

ALIAS: 'j'

OPTIONS:
  -e, --edit         Open jump list file in "\$EDITOR"
  -i, --index <idx>  Jump to index in jump list. Index is 1 based
  -l, --list         List jump list
  -p, --path <path>  Add path to jump list
  -h, --help         Prints help information
eof
  set -e

  local -a args
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -e | --edit)
        open_editor=true
        ;;
      -i | --index)
        shift
        index="$1"
        ;;
      -l | --list)
        show_list=true
        ;;
      -p | --path)
        shift
        path="$1"
        ;;
      *)
        args+=("$1")
        ;;
    esac
    shift
  done

  [ -n "$CMD_HELP" ] && {
    printf "%s\n" "$help_msg"
    exit 1
  }

  if [[ -n $open_editor ]]; then
    $EDITOR "$JUMPLIST_CACHE_FILE"
    exit 0
  fi

  if [[ -n $show_list ]]; then
    local index=1
    while IFS= read -r line; do
      echo "$index: $line"
      index=$((index + 1))
    done <"$JUMPLIST_CACHE_FILE"
    exit 0
  fi

  if [[ -n $path ]]; then
    if [[ $path == '.' ]]; then
      path="$(pwd)"
    fi
    if ! grep -qFx "$path" "$JUMPLIST_CACHE_FILE"; then
      echo "$path" >>"$JUMPLIST_CACHE_FILE"
    fi
    exit 0
  fi

  if [[ -n $index ]]; then
    local path
    path="$(sed "${index}q;d" "$JUMPLIST_CACHE_FILE")"

    if [[ -n $path ]]; then
      cmd_attach --path "$path"
    fi

    exit 0
  fi

  if ! grep -qFx "$(pwd)" "$JUMPLIST_CACHE_FILE"; then
    pwd >>"$JUMPLIST_CACHE_FILE"
  fi
}
function cmd_kill() {
  set +e
  local help_msg
  ifs='' read -r -d '' help_msg <<eof
USAGE:
  tm kill [OPTIONS]

Kill a running tmux session

ALIAS: 'k'

OPTIONS:
  -a, --all     Kill all sesssions
  -h, --help    Prints help information
eof
  set -e

  local -a args
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -a | --all)
        do_all=true
        ;;
      *)
        args+=("$1")
        ;;
    esac
    shift
  done

  [ -n "$CMD_HELP" ] && {
    printf "%s\n" "$help_msg"
    exit 1
  }

  # shellcheck disable=SC2207
  sessions=($(tmux list-sessions -F "#{session_name}"))

  if [[ -n $do_all ]]; then
    for name in "${sessions[@]}"; do
      tmux kill-session -t "$name"
      echo "Killed session: $name"
    done
    exit 0
  fi

  # shellcheck disable=SC2207
  names=($(write-list "${sessions[@]}" | fzf-down -m))
  for name in "${names[@]}"; do
    tmux kill-session -t "$name"
    echo "Killed session: $name"
  done
}

function cmd_list() {
  set +e
  local help_msg
  ifs='' read -r -d '' help_msg <<eof
USAGE: tm list [OPTIONS]

List workspace and single paths registered to tm

ALIAS: 'l'

OPTIONS:
  -s, --single     Show only single paths
  -w, --workspace  Show only workspace paths
  -h, --help       Prints help information
eof
  set -e

  local -a args
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -s | --single)
        no_workspace=true
        ;;
      -w | --workspace)
        no_single=true
        ;;
      *)
        args+=("$1")
        ;;
    esac
    shift
  done

  [ -n "$CMD_HELP" ] && {
    printf "%s\n" "$help_msg"
    exit 1
  }

  if [[ -z $no_single ]]; then
    echo "Single:"
    write-paths "$SINGLE_CACHE_FILE"
  fi

  if [[ -z $no_workspace ]]; then
    [[ -z $no_single ]] && echo ""

    echo "Workspace:"
    write-paths "$WORKSPACE_CACHE_FILE"
  fi
}

function cmd_remove() {
  set +e
  local help_msg
  ifs='' read -r -d '' help_msg <<eof
USAGE:
  tm remove [OPTIONS] [path...]

Remove registered path from tm

OPTIONS:
  -s, --single     Remove only single paths
  -w, --workspace  Remove only workspace paths
  -h, --help       Prints help information

ARGS:
  <path...>        The path to be removed. If no path is passed,
                   tm will use fzf to select paths to remove
eof
  set -e

  local -a args
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -s | --single)
        only_single=true
        ;;
      -w | --workspace)
        only_workspace=true
        ;;
      *)
        args+=("$1")
        ;;
    esac
    shift
  done

  [ -n "$CMD_HELP" ] && {
    printf "%s\n" "$help_msg"
    exit 1
  }

  local paths
  if [[ ${#args[@]} -eq 0 ]]; then
    local singles workspaces
    if [[ -z $only_workspace ]]; then
      # shellcheck disable=SC2207
      singles=($(write-paths "$SINGLE_CACHE_FILE"))
    fi
    if [[ -z $only_single ]]; then
      # shellcheck disable=SC2207
      workspaces=($(write-paths "$WORKSPACE_CACHE_FILE"))
    fi
    # shellcheck disable=SC2207
    paths=($(write-list "${singles[@]}" "${workspaces[@]}" | fzf-down -m))
  else
    path=("${args[@]}")
  fi

  local sum
  for p in "${paths[@]}"; do
    sum="$(checksum "$p")"
    remove-line "$sum" "$SINGLE_CACHE_FILE"
    remove-line "$sum" "$WORKSPACE_CACHE_FILE"
  done
}

function cmd_wcmd() {
  set +e
  local help_msg
  ifs='' read -r -d '' help_msg <<eof
USAGE:
  tm wcmd [OPTIONS] <window> -- <cmd...>

Send a command to a execute in a tmux window

ALIAS: 'w'

OPTIONS:
  -h, --help    Prints help information

ARGS:
  <window>      Name of the window to execute the command from.
                This name window name can be taken from a path.
                In this case the basename will be used. This is
                useful with git worktrees and different branches.

  <cmd>         The command to be executed in the tmux window.
                Passing this after '--' will make sure that no
                option parsing is completed and the entire command
                is sent to the tmux window. This however does not
                have to be after '--'.

EXAMPLES:
  tm wcmd server cd backend
  tm w foo/bar/baz -- make test
eof
  set -e

  local -a args
  while [[ $# -gt 0 ]]; do
    case "$1" in
      --)
        shift
        args=("${args[@]}" "$@")
        break
        ;;
      *)
        args+=("$1")
        ;;
    esac
    shift
  done

  if [[ ${#args[@]} -lt 2 ]]; then
    echo "Invalid number of arguments"
    CMD_HELP=true
  fi

  [ -n "$CMD_HELP" ] && {
    printf "%s\n" "$help_msg"
    exit 1
  }

  branch_name="$(basename "${args[0]}")"
  session_name=$(tmux display-message -p "#S")
  clean_name=$(echo "$branch_name" | tr "./" "__")
  target="$session_name:$clean_name"

  if ! tmux has-session -t "$target" 2>/dev/null; then
    tmux neww -dn "$clean_name"
    if [[ -f .envrc ]]; then
      # sleeping for 1 second just to give direnv some time to load
      sleep 1
    fi
  fi

  unset 'args[0]'

  tmux send-keys -t "$target" "${args[*]}" C-m
}

# --- Utility -----------------------------------------------------------------

function checksum() {
  sha256sum <<<"$1" | awk '{print $1}'
}

function write-list() {
  while [[ $# -gt 0 ]]; do
    echo "$1"
    shift
  done
}

function write-paths() {
  local path
  while IFS= read -r line; do
    path="$(echo "$line" | awk '{print $2}')"
    echo "$path"
  done <"$1"
}

function remove-line() {
  local tmpfile="$CACHE_HOME/tmpfile"
  awk "!/$1/" "$2" >"$tmpfile"
  if [[ $(sha256sum "$2") != $(sha256sum "$tmpfile") ]]; then
    mv -f "$tmpfile" "$2"
  else
    rm "$tmpfile"
  fi
}

function validate-cache-folder() {
  mkdir -p "$CACHE_HOME"

  local default_workspaces=("$HOME/dev")
  local default_singles=("$HOME/.local/nyx" "$HOME/.config/nvim" "$HOME/.config/awesome")

  if [ ! -f "$WORKSPACE_CACHE_FILE" ]; then
    touch "$WORKSPACE_CACHE_FILE"
    for w in "${default_workspaces[@]}"; do
      if [[ -d $w ]]; then
        echo "$(checksum "$w") $w" >>"$WORKSPACE_CACHE_FILE"
      fi
    done
  fi

  if [ ! -f "$SINGLE_CACHE_FILE" ]; then
    touch "$SINGLE_CACHE_FILE"
    for s in "${default_singles[@]}"; do
      if [[ -d $s ]]; then
        echo "$(checksum "$s") $s" >>"$SINGLE_CACHE_FILE"
      fi
    done
  fi

  if [ ! -f "$JUMPLIST_CACHE_FILE" ]; then
    touch "$JUMPLIST_CACHE_FILE"
  fi
}

function fzf-down() {
  fzf --height 50% --reverse "$@"
}

# --- Execute main process ----------------------------------------------------

main "$@"

# vim: et sw=2 ts=2 sts=2
