#!/usr/bin/env bash

set -e

# shellcheck shell=bash
INTERNAL_COMMANDS="^(add|clone|help|list|new|remove|root|source|switch)$"

WT_ALIAS_A="add"
WT_ALIAS_C="clone"
WT_ALIAS_R="root"
WT_ALIAS_S="switch"

function main() {
  WT_COMMAND="help"
  WT_ARGS=()

  # Parse command line options
  if [ -n "$*" ]; then
    if [[ $1 == '--help' ]]; then
      HELP=true
    elif [[ $1 =~ $INTERNAL_COMMANDS ]]; then
      WT_COMMAND="${1//-/_}"
      shift
    else
      local upper="WT_ALIAS_$(echo $1 | tr '[:lower:]' '[:upper:]')"
      local internal_command="$(printf %s "${!upper}")"
      if [ -n "$internal_command" ]; then
        WT_COMMAND="$internal_command"
        shift
      fi
    fi
  fi

  while [[ $# -gt 0 ]]; do
    key="$1"
    case $key in
      -h | --help)
        CMD_HELP=true
        ;;
      *)
        WT_ARGS+=("$1")
        ;;
    esac
    shift
  done

  [ -n "$HELP" ] && cmd_help

  "cmd_$WT_COMMAND" "${WT_ARGS[@]}"

  exit 0
}

# --- Commands ----------------------------------------------------------------

function cmd_add() {
  set +e
  local help_msg
  IFS='' read -r -d '' help_msg <<EOF
Add a new worktree

USAGE:
  wt add [OPTIONS] [name] [path]

ALIAS: 'a'

OPTIONS:
  -h, --help    Prints help information

ARGS:
  <name>        The name of the branch
  <path>        The name of the new directory to clone into
EOF
  set -e

  local -a args
  while [[ $# -gt 0 ]]; do
    case "$1" in
      *)
        args+=("$1")
        ;;
    esac
    shift
  done

  [ -n "$CMD_HELP" ] && {
    printf "%s\n" "$help_msg"
    exit 1
  }

  local root name path
  root=$(get_root_dir)
  name="${args[0]}"
  path="${args[1]}"

  if [ -z "$name" ]; then
    name=$(git ls-remote --heads ./. | awk '{print $2}' | cut -c 12- | fzf-down)
  fi

  if [ -z "$path" ]; then
    path="$name"
  fi

  local full remote
  full="$root/$path"
  remote="$(git ls-remote --refs ./. "$name" | awk '{print $2}' | grep 'refs/remotes')"

  if [ ! -e "$full" ]; then
    git worktree add --checkout "$full" "$name"

    if [ -n "$remote" ]; then
      git --work-tree "$full" --git-dir "$full/.git" \
        branch "$name" -u "$(git base-remote)/$name"
    fi
  fi
}

function cmd_clone() {
  set +e
  local help_msg
  IFS='' read -r -d '' help_msg <<EOF
Clone a repository into a new directory.

USAGE:
  wt clone [OPTIONS] <repository> [path]

ALIAS: 'c'

OPTIONS:
  -b, --branch <name>   Initial branch to clone to
  -u, --upstream <url>  Upstream remote to track
  -h, --help            Prints help information

ARGS:
  <repository>          The (remote) repository to clone from
  <path>                The name of the new directory to clone into
EOF
  set -e

  local -a args
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -b | --branch)
        starting_branch="$2"
        shift
        ;;
      -u | --upstream)
        upstream="$2"
        shift
        ;;
      *)
        args+=("$1")
        ;;
    esac
    shift
  done

  [ -n "$CMD_HELP" ] && {
    printf "%s\n" "$help_msg"
    exit 1
  }

  local url="${args[0]}"
  local basename=${url##*/}
  local name=${args[1]:-${basename%.git}}

  mkdir "$name"
  cd "$name"

  # Move the top level .git folder (A.K.A the $GIT_DIR) to .bare directory
  #
  # The target folder structure looks like the following:
  # .bare/
  # main/
  # feature/
  git clone --bare "$url" .bare
  echo "gitdir: ./.bare" >.git

  # Explicitly sets the remote origin fetch so we can fetch remote branches
  # This is required because cloning with `--bare` repository does not set
  # The remote for origin
  git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"

  # worktree add tries to find a remote-tracking branch whose name uniquely
  # matches the new branch name.
  git config worktree.guessRemote true

  # Adding vim modline to help with filetype
  echo "# vim:ft=gitconfig" >./.bare/tmp
  cat ./.bare/config >>./.bare/tmp
  rm ./.bare/config
  mv ./.bare/tmp ./.bare/config

  git fetch origin

  if [ -n "$upstream" ]; then
    git remote add upstream "$upstream"
    git fetch upstream
  fi

  # Getting the default branch of the remote and settings the remote's HEAD
  local default_branch symref
  symref="$(git symbolic-ref HEAD)"
  default_branch="${symref##refs/heads/}"
  git remote set-head origin "$default_branch"

  if [ -z "$starting_branch" ]; then
    starting_branch="$default_branch"
  fi

  # Creating the first worktree with the default branch
  git worktree add --checkout "$starting_branch" "$starting_branch"

  # Setting the local branch to track with the remote branch
  git --work-tree "$starting_branch" --git-dir "$starting_branch/.git" \
    branch "$starting_branch" -u "origin/$starting_branch"
}

function cmd_help() {
  if [[ $1 =~ $INTERNAL_COMMANDS ]]; then
    $1 '--help'
  fi

  set +e
  local msg
  IFS='' read -r -d '' msg <<EOF
Utility script to work with git worktree's

USAGE:
  wt [OPTIONS] <command>

COMMANDS:
  add            Add a new worktree
  clone          Clone a repository into a new directory
  help           Utility script to work with git worktree's
  list           List worktrees
  new            Create new branch with worktree
  remove         Remove worktree
  root           Return the root of the repository
  source         Output wt wrapper function to be source in rc file
  switch         Switch directory to a different worktree

OPTIONS:
  -h, --help     Prints help information
EOF
  set -e

  printf "%s\n" "$msg"
  exit 1
}

function cmd_list() {
  set +e
  local msg
  IFS='' read -r -d '' msg <<EOF
List worktrees

USAGE:
  wt list [OPTIONS]

OPTIONS:
  -h, --help     Prints help information
EOF
  set -e

  local -a args
  while [[ $# -gt 0 ]]; do
    case "$1" in
      *)
        args+=("$1")
        ;;
    esac
    shift
  done

  [ -n "$CMD_HELP" ] && {
    printf "%s\n" "$help_msg"
    exit 1
  }

  git worktree list | tail -n +2
}

function cmd_new() {
  set +e
  local msg
  IFS='' read -r -d '' msg <<EOF
Create a new branch using worktrees

USAGE:
  wt new <name>

OPTIONS:
  -h, --help     Prints help information

ARGS:
  <name>         The name of the branch
EOF
  set -e

  local -a args
  while [[ $# -gt 0 ]]; do
    case "$1" in
      *)
        args+=("$1")
        ;;
    esac
    shift
  done

  [ -n "$CMD_HELP" ] && {
    printf "%s\n" "$help_msg"
    exit 1
  }

  local name root full
  name="${args[0]}"

  if [ -z "$name" ]; then
    echo "Missing argument <name>"
    exit 1
  fi

  root="$(get_root_dir)"
  full="$root/$name"

  git worktree add --track -b "$name" "$full"
}

function cmd_remove() {
  set +e
  local msg
  IFS='' read -r -d '' msg <<EOF
Remove worktree

USAGE:
  wt remove [OPTIONS] [name]

OPTIONS:
  -d, --delete   Delete branch as well
  -f, --force    Force removal of worktree
  -h, --help     Prints help information

ARGS:
  <name>         Fuzzy name of switch target
EOF
  set -e

  local -a args
  while [[ $# -gt 0 ]]; do
    case "$1" in
      -d | --delete)
        do_delete=true
        ;;
      -f | --force)
        force_opt="--force"
        ;;
      *)
        args+=("$1")
        ;;
    esac
    shift
  done

  [ -n "$CMD_HELP" ] && {
    printf "%s\n" "$help_msg"
    exit 1
  }

  local path branch line extra_args
  if [[ ${#args[@]} -gt 0 ]]; then
    extra_args=("--select-1" "--exit-0" "--exact" "--query" "${args[@]}")
  fi

  line="$(git worktree list | tail -n +2 | fzf --height 40% --reverse "${extra_args[@]}")"
  path="$(echo "$line" | awk '{print $1}')"
  branch="$(echo "$line" | sed -E 's|.*\[(.*)\].*|\1|')"

  git worktree remove "$path" $force_opt
  if [ -n "$do_delete" ]; then
    git branch -d "$branch"
  fi
}

function cmd_root() {
  set +e
  local msg
  IFS='' read -r -d '' msg <<EOF
Return the root of the repository

USAGE:
  wt root [OPTIONS]

ALIAS: 'r'

OPTIONS:
  -h, --help    Prints help information
EOF
  set -e

  [ -n "$CMD_HELP" ] && {
    printf "%s\n" "$help_msg"
    exit 1
  }

  get_root_dir
}

function cmd_source() {
  set +e
  local help_msg
  IFS='' read -r -d '' help_msg <<EOF
Output wt wrapper function to be source in rc file

USAGE:
  wt source [OPTIONS]

OPTIONS:
  -h, --help    Prints help information
EOF
  set -e

  [ -n "$CMD_HELP" ] && {
    printf "%s\n" "$help_msg"
    exit 1
  }

  cat <<EOF
function wt() {
  if [[ "\$1" =~ ^\(switch\|s\)\$ ]]; then
    SCRIPT="\$(command wt \$@)"
    [ \$? -eq 0 ] && eval "\$SCRIPT" || printf "\$SCRIPT"
  else
    command wt \$@
  fi
}

# =============================================================================
#
# To initialize wt, add this to your configuration (usually ~/.bashrc):
#
# [ -x "\$(command -v wt)" ] && eval "\$(wt source)"
EOF
}

function cmd_switch() {
  set +e
  local help_msg
  IFS='' read -r -d '' help_msg <<EOF
Switch directory to a different worktree

USAGE:
  wt switch [OPTIONS] [name]

ALIAS: 's'

OPTIONS:
  -h, --help    Prints help information

ARGS:
  <name>        Fuzzy name of switch target
EOF
  set -e

  local -a args
  while [[ $# -gt 0 ]]; do
    case "$1" in
      *)
        args+=("$1")
        ;;
    esac
    shift
  done

  [ -n "$CMD_HELP" ] && {
    printf "%s\n" "$help_msg"
    exit 1
  }

  local selected extra_args
  if [[ ${#args[@]} -gt 0 ]]; then
    extra_args=("--select-1" "--exit-0" "--exact" "--query" "${args[@]}")
  fi

  worktrees=($(git worktree list | tail -n +2))
  if [[ ${#worktrees[@]} -eq 1 ]]; then
    selected="${worktrees[0]}"
  else
    selected="$(git worktree list | tail -n +2 | fzf --height 40% --reverse "${extra_args[@]}")"
  fi

  if [[ $selected =~ \(bare\)$ ]]; then
    selected="$(echo "$selected" | awk '{print $1}')"
    selected="$(dirname "$selected")"
  else
    selected="$(echo "$selected" | awk '{print $1}')"
  fi

  echo "cd \"$selected\""
}

# --- Utility -----------------------------------------------------------------

function get_root_dir() {
  dirname "$(realpath "$(git rev-parse --git-common-dir)")"
}

function fzf-down() {
  fzf --height 40% --reverse
}

# --- Execute main process ----------------------------------------------------

main "$@"

# vim: et sw=2 ts=2 sts=2
