
# All these aliases have something to do with commits and changes

[alias]
    # Add only non whitespace changes ([A]dd [N]o [W]hitespace)
    anw = !git diff -U0 -w --no-color -- \"$@\" | git apply --cached --ignore-whitespace --unidiff-zero "#"

    # I want to sneak a commit into the last commit I did.
    oops = commit --amend --no-edit

    # want to fixup a commit that is not the last commit. https://blog.filippo.io/git-fixup-amending-an-older-commit/
    fixup = "!f() { TARGET=$(git rev-parse "$1"); git commit --fixup=$TARGET ${@:2} && EDITOR=true git rebase -i --autostash --autosquash $TARGET^; }; f"

    # Create a list of patches from the origin of this branch
    patch = "!git format-patch origin/$(git branch-name)"

    # Create a list of patches from origin master
    branch-patch=format-patch origin/master

    # Create a patch file from the diff of the current changes.
    diff-patch = "!git diff > $(git branch-name).patch"

    # Unstage all stages changes
    unstage = "!f() { git reset --soft $((($#>=1))&&echo --) ${@:-HEAD --} ; } ; f"

    # Detect moevd or copied lines and ignore whitespace
    blame = blame -w -M -C

    # Create a SAVEPOINT commit that is a snapshot of your current branch state.
    # This includes untracked files.
    save = "!git add -A && git commit -m 'SAVEPOINT'"

    # Create a WIP commit that is a snapshot of your current modifications.
    # this does not include untracked files.
    wip = "!git add -u && git commit -m 'WIP'"

    # This create a SAVEPOINT and then reset HEAD back to the previous commit
    wipe = "!git add -A && git commit -m 'WIPE SAVEPOINT' && git reset HEAD~1 --hard"

    # This resets head to the previous change but keeps the changes in the working directory
    undo = reset HEAD~1 --mixed

# vim: ft=gitconfig:
