#!/usr/bin/bash

# Checkout a pull request by number.
# This will create a new local branch with a name based on the remote's branch name
#
# Suppored remote hosting sites:
#   - Github
#   - Gitlab
#   - bitbucket

# Defaults
VERBOSE=0

while test $# != 0 ; do
    case "$1" in
        -h|--help) usage 0 ;;
        -v|--verbose) VERBOSE=1 ;;
        --) shift; break ;;
        *) break ;;
    esac
    shift
done

function usage()
{
    cat << 'EOF'
Checkout a pull request locally
Usage: git pr [OPTIONS] <PR_NUMBER>

OPTIONS:
    -h, --help     Print this help message
    -v, --verbose  Verbose output

ARGS:
    <PR_NUMBER>    The pr number to be pulled
EOF
    exit $1
}

# Print failure message to stderr and exit
function die()
{
    echo "Failed: $@" 1>&2
    exit 1
}

# Print verbose messages if verbose messaging is turned on
function verbose()
{
    [[ "$VERBOSE" == 1 ]] && echo "$@"
}

# Namespace all pr branches under pr/ folder in refs
PR_BRANCH="pr/$1"

# Get origin's remote url and check if it is supported.
# If supported then save for fetch ref matching
REMOTE_URL="$(git ls-remote --get-url origin)"
if [[ $REMOTE_URL =~ "github" ]]; then
    verbose "Github remote detected"

    # https://www.jvt.me/posts/2019/01/19/git-ref-github-pull-requests/
    REF_MAP="refs/pull/$1/head:${PR_BRANCH}"
elif [[ $REMOTE_URL =~ "gitlab" ]]; then
    verbose "Gitlab remote detected"

    # https://www.jvt.me/posts/2019/01/19/git-ref-gitlab-merge-requests/
    REF_MAP="refs/merge-requests/$1/head:${PR_BRANCH}"
elif [[ $REMOTE_URL =~ "bitbucket" ]]; then
    verbose "Bitbucket remote detected"

    # https://www.atlassian.com/git/articles/pull-request-proficiency-fetching-abilities-unlocked
    REF_MAP="refs/pull-request/*/head:${PR_BRANCH}"
else
    die "Remote hosting provider is not supported"
fi

verbose "Setting ref map to: $REF_MAP"

# Check what HEAD is. If it is on the pr branch already then switch to master
# so it can be deleted and refetched
PR_BRANCH_SHA="$(git rev-parse refs/heads/pr/$1 2>/dev/null)"
HEAD_SHA="$(git rev-parse HEAD)"
[[ "$PR_BRANCH_SHA" == "$HEAD_SHA" ]] && {
    verbose "Currently on $PR_BRANCH, checking out master to be able to delete $PR_BRANCH"
    git checkout master
}

# If we have already checked out this pr branch once delete it
# and re-fetch it. This helps when a pr has been rebased. We just want
# the latest updates in the pr.
BRANCH_EXISTS=$(git show-ref refs/heads/pr/$1)
[ -n "$BRANCH_EXISTS" ] && {
    verbose "Detected old $PR_BRANCH... deleting"
    git branch -D $PR_BRANCH
}

# Fetch updates from origin
git fetch origin

# Fetch the pr localy and map to $PR_BRANCH
git fetch origin $REF_MAP

# Switch HEAD to $PR_BRANCH
git checkout $PR_BRANCH

